{"version":3,"sources":["圆周率计算-可设置圆周率位数-可选择线程个数-多线程大数框架webworker输出useragent大数框架/mythread1-decimal.js"],"names":["importScripts","addEventListener","event","piwei","data","threadall","threadid","console","log","Decimal","precision","p","a","h","x","fu","t","i","len","mul","plus","abs","cmp","div","add","postMessage"],"mappings":"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","file":"mythread1-decimal.3779ec25.js","sourceRoot":"..","sourcesContent":["// (() => {\r\n// console.log(self.name)\r\nimportScripts(\"https://cdn.staticfile.org/decimal.js/10.2.0/decimal.min.js\");\r\n// importScripts(\"./decimal.min.js\");\r\n/** \r\n     * \r\n     * \r\n    *\r\n    *\r\n    *\r\n    * \r\n    * https://github.com/MikeMcl/decimal.js\r\n    An arbitrary-precision Decimal type for JavaScript.\r\n\r\n    \r\nBuild Status CDNJS\r\n\r\n\r\n\r\nFeatures\r\nIntegers and floats\r\nSimple but full-featured API\r\nReplicates many of the methods of JavaScript's Number.prototype and Math objects\r\nAlso handles hexadecimal, binary and octal values\r\nFaster, smaller, and perhaps easier to use than JavaScript versions of Java's BigDecimal\r\nNo dependencies\r\nWide platform compatibility: uses JavaScript 1.5 (ECMAScript 3) features only\r\nComprehensive documentation and test set\r\nIncludes a TypeScript declaration file: decimal.d.ts\r\nAPI\r\n\r\nThe library is similar to bignumber.js, but here precision is specified in terms of significant digits rather than decimal places, and all calculations are rounded to the precision (similar to Python's decimal module) rather than just those involving division.\r\n\r\nThis library also adds the trigonometric functions, among others, and supports non-integer powers, which makes it a significantly larger library than bignumber.js and the even smaller big.js.\r\n\r\nFor a lighter version of this library without the trigonometric functions see decimal.js-light. \r\n\r\n\r\nJavaScript的任意精度Decimal类型。\r\n\r\n    \r\n\r\n\r\n\r\n\r\n特征\r\n整数和浮点数\r\n简单但功能齐全的API\r\n复制JavaScript的Number.prototype和Math对象的许多方法\r\n还处理十六进制，二进制和八进制值\r\n比Java的BigDecimal的JavaScript版本更快，更小，也许更容易使用\r\n没有依赖\r\n广泛的平台兼容性：仅使用JavaScript 1.5（ECMAScript 3）功能\r\n全面的文档和测试集\r\n\r\n*/\r\n\r\naddEventListener(\"message\", function(event) {\r\n    var piwei;\r\n  //   console.log(self.name)\r\n  piwei = event.data[0];\r\n  var threadall = event.data[1];\r\n  var threadid = event.data[2];\r\n  console.log(\"副线程\" + (threadid + 1) + \"从主线程接收\" + \"event.data\\n\");\r\n  console.log(...event.data);\r\n\r\n  Decimal.precision = piwei + 1;\r\n  var p = new Decimal(0);\r\n  var a = new Decimal(1);\r\n  var h = 1;\r\n  var x = new Decimal(0);\r\n  var fu = 1;\r\n  var t = new Decimal(1);\r\n  for (var i = 0, len = threadid; i < len; i++) {\r\n    fu = -1 * fu;\r\n    a = Decimal.mul(a, 1024);\r\n    x = x.plus(1);\r\n  }\r\n  while (Decimal.abs(t).cmp(new Decimal(\"1e-\" + (1 + piwei))) != -1) {\r\n    t = Decimal.mul(h, fu)\r\n      .mul(\r\n        Decimal.div(-(2 ** 5), Decimal.mul(4, x).plus(1))\r\n          .plus(Decimal.div(-1, Decimal.mul(4, x).plus(3)))\r\n          .plus(Decimal.div(2 ** 8, Decimal.mul(10, x).plus(1)))\r\n          .plus(Decimal.div(-(2 ** 6), Decimal.mul(10, x).plus(3)))\r\n          .plus(Decimal.div(-(2 ** 2), Decimal.mul(10, x).plus(5)))\r\n          .plus(Decimal.div(-(2 ** 2), Decimal.mul(10, x).plus(7)))\r\n          .plus(Decimal.div(1, Decimal.mul(10, x).plus(9)))\r\n      )\r\n      .div(Decimal.mul(2 ** 6, a));\r\n\r\n    p = Decimal.add(p, t);\r\n    if (Decimal.abs(t).cmp(new Decimal(\"1e-\" + (1 + piwei))) == -1) break;\r\n\r\n    for (var i = 0, len = threadall; i < len; i++) {\r\n      fu = -1 * fu;\r\n      a = Decimal.mul(a, 1024);\r\n      x = x.plus(1);\r\n    }\r\n  }\r\n  postMessage([\"\" + p, \"\" + x.plus(1)]);\r\n});\r\n// })();\r\n"]}